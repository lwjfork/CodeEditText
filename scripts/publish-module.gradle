apply plugin: 'maven-publish'
apply plugin: 'signing'
if (project.hasProperty("kotlin")) {
    apply plugin: "org.jetbrains.dokka"
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    if (project.plugins.findPlugin("com.android.library")) {
        // For Android libraries
        from android.sourceSets.main.java.srcDirs
        if (project.hasProperty("kotlin")) {
            from android.sourceSets.main.kotlin.srcDirs
        }
    } else {
        // For pure Kotlin libraries, in case you have them
        from sourceSets.main.java.srcDirs
        if (project.hasProperty("kotlin")) {
            from sourceSets.main.kotlin.srcDirs
        }

    }
}

if (project.hasProperty("kotlin")) {
    tasks.withType(dokkaHtmlPartial.getClass()).configureEach {
        pluginsMapConfiguration.set(
                ["org.jetbrains.dokka.base.DokkaBase": """{ "separateInheritedMembers": true}"""]
        )
    }
    task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
        archiveClassifier.set('javadoc')
        from dokkaJavadoc.outputDirectory
    }
} else {

    task javadoc(type: Javadoc) {
        options.encoding "UTF-8"
        options.charSet 'UTF-8'
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.linksOffline "http://d.android.com/reference","${android.sdkDirectory}/docs/reference"
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
        failOnError = false
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
        options.addStringOption('charSet ', 'UTF-8')
        options {
            encoding "UTF-8"
            charSet 'UTF-8'
            links "http://docs.oracle.com/javase/7/docs/api"
        }
    }
}


artifacts {
    archives androidSourcesJar
    archives javadocJar
}

group = PUBLISH_GROUP_ID
version = PUBLISH_VERSION





afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId PUBLISH_GROUP_ID
                artifactId PUBLISH_ARTIFACT_ID
                version PUBLISH_VERSION
                // Two artifacts, the `aar` (or `jar`) and the sources
                if (project.plugins.findPlugin("com.android.library")) {
                    from components.release
                } else {
                    from components.java
                }
                artifact androidSourcesJar
                artifact javadocJar

                // Mostly self-explanatory metadata
                pom {
                    name = POM_NAME
                    description = POM_DESCRIPTION
                    url = POM_URL
                    licenses {
                        license {
                            name = POM_LICENCE_NAME
                            url = POM_LICENCE_URL
                        }
                    }
                    developers {
                        developer {
                            id = POM_DEVELOPER_ID
                            name = POM_DEVELOPER_NAME
                            email = POM_DEVELOPER_EMAIL
                        }
                        // Add all other devs here...
                    }

                    // Version control info - if you're using GitHub, follow the
                    // format as seen here
                    scm {
                        connection = POM_SCM_CONNECTION
                        developerConnection = POM_SCM_DEV_CONNECTION
                        url = POM_SCM_URL
                    }
                }
            }
        }
    }
}

ext["signing.keyId"] = rootProject.ext["signing.keyId"]
ext["signing.password"] = rootProject.ext["signing.password"]
ext["signing.secretKeyRingFile"] = rootProject.ext["signing.secretKeyRingFile"]
signing {
    sign publishing.publications
}

